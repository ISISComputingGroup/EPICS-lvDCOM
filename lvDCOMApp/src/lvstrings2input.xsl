<?xml version="1.0" encoding="UTF-8"?>
<!--
    ########### SVN repository information ###################
    # $LastChangedDate$
    # $LastChangedBy$
    # $LastChangedRevision$
    # $HeadURL$
    ########### SVN repository information ###################

    Usage: xsltproc lvstrings2input.xsl lvexport.xml > lvinput.xml

    lvexport.xml is the output of ExportVIStrings() from LabVIEW, but has also 
	             been processed by the fix_xml.cmd  script	(as the raw output is not true XML)

	@author Freddie Akeroyd, STFC ISIS Facility, UK
-->
<xsl:stylesheet
    version="1.0"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:lvdcom="http://epics.isis.rl.ac.uk/lvDCOMinput/1.0">
    
    <xsl:output method="xml" indent="yes" version="1.0" encoding="UTF-8"/>
    
    <xsl:template match="/VI">
        <xsl:comment>Generated by $Id$</xsl:comment>
        <xsl:variable name="vi_name" select="@name" />
		<xsl:element name="lvinput">
		    <xsl:attribute name="xmlns">http://epics.isis.rl.ac.uk/lvDCOMinput/1.0</xsl:attribute>
		    <xsl:attribute name="xsi:schemaLocation">http://epics.isis.rl.ac.uk/lvDCOMinput/1.0 lvDCOMinput.xsd</xsl:attribute>
		    <xsl:element name="extint">
		       <xsl:attribute name="path">c:/LabVIEW Modules/Common/External Interface/External Interface.llb/External Interface - Set Value.vi</xsl:attribute> 
			</xsl:element>
		<xsl:element name="section" >
		       <xsl:attribute name="name">example</xsl:attribute> 
		    <xsl:element name="vi">
		        <xsl:attribute name="path"><xsl:value-of select="$vi_name"/></xsl:attribute> 
		        <xsl:apply-templates select="CONTENT" />
		    </xsl:element>
		</xsl:element>
		    </xsl:element>
	</xsl:template>
	
   <xsl:template match="CONTENT">
           <xsl:apply-templates select="CONTROL" />
	</xsl:template>

   <xsl:template match="CONTROL">
   	<xsl:variable name="vartype" select="@type" />  
   		<xsl:variable name="control_type">  
   	<xsl:call-template name="convertLVType">
   		<xsl:with-param name="vartype" select="$vartype" />
   	</xsl:call-template>
        </xsl:variable>
   		
   		<xsl:variable name="control_id" select="@ID" />
        <xsl:variable name="control_name" select="@name" />
   	    <xsl:variable name="param_name" select="translate($control_name,' ', '_')" />
   	<xsl:if test="$control_type != 'invalid'">
		<xsl:element name="param">
		<xsl:attribute name="name"><xsl:value-of select="$param_name"/></xsl:attribute>  
		<xsl:attribute name="type"><xsl:value-of select="$control_type"/></xsl:attribute> 
			<xsl:if test="$control_type = 'ring'"><xsl:call-template name="extractRingText"/> </xsl:if>
			<xsl:if test="$control_type = 'enum'"><xsl:call-template name="extractRingText"/> </xsl:if>
			<xsl:if test="$control_type = 'boolean'"><xsl:call-template name="extractBooleanText"/> </xsl:if>
			<xsl:element name="read">
		    <xsl:attribute name="method">GCV</xsl:attribute>  
		    <xsl:attribute name="target"><xsl:value-of select="$control_name"/></xsl:attribute> 
		</xsl:element>
		    <xsl:element name="set">
		        <xsl:attribute name="method">SCV</xsl:attribute>  
		        <xsl:attribute name="extint">false</xsl:attribute>  
		        <xsl:attribute name="target"><xsl:value-of select="$control_name"/></xsl:attribute> 
		    </xsl:element>
		</xsl:element>
   	</xsl:if>
	</xsl:template>
   
<xsl:template name="extractRingText">
	<xsl:element name="items">
		<xsl:variable name="n" select="count(PARTS/PART[@type='Ring Text']/MLABEL/STRINGS/STRING)" />
		<xsl:choose>
		<xsl:when test="$n > 0">
			<xsl:comment>Ring Names extraced from LabVIEW, values autogenerated so may be wrong</xsl:comment>
			<xsl:for-each select="PARTS/PART[@type='Ring Text']/MLABEL/STRINGS/STRING">
				<xsl:element name="item">
					<xsl:attribute name="name"><xsl:value-of select="."/></xsl:attribute>
					<xsl:attribute name="value"><xsl:value-of select="position()-1"/></xsl:attribute>
				</xsl:element>
			</xsl:for-each>
		</xsl:when>
			<xsl:otherwise>
				<xsl:comment>Enum names cannot be extraced from LabVIEW - you need to add manually</xsl:comment>
				<xsl:element name="item">
				  <xsl:attribute name="name">Enum-0</xsl:attribute>
				  <xsl:attribute name="value">0</xsl:attribute>
				</xsl:element>
			</xsl:otherwise>
			</xsl:choose>
	</xsl:element>
</xsl:template>

	<xsl:template name="extractBooleanText">
		<xsl:element name="items">
			<xsl:for-each select="PARTS/PART[@type='Boolean Text']/MLABEL/STRINGS/STRING">
				<xsl:element name="item">
					<xsl:attribute name="name"><xsl:value-of select="."/></xsl:attribute>
					<xsl:attribute name="value"><xsl:value-of select="position()-1"/></xsl:attribute>
				</xsl:element>
			</xsl:for-each>
		</xsl:element>
	</xsl:template>
	
	<xsl:template name="convertLVType">
	<xsl:param name="vartype" />
	<xsl:choose>
		<xsl:when test="$vartype = 'Numeric'">float64</xsl:when>		
		<xsl:when test="$vartype = 'String'">string</xsl:when>		
		<xsl:when test="$vartype = 'Boolean'">boolean</xsl:when>		
		<xsl:when test="$vartype = 'Enum'">enum</xsl:when>		
		<xsl:when test="$vartype = 'Ring'">ring</xsl:when>		
		<xsl:otherwise>invalid</xsl:otherwise>
	</xsl:choose>
</xsl:template>

</xsl:stylesheet>

<!--
   /CONTENT/CONTROL/@type    Numeric(ID=80)  String(ID=81)  Array(ID=82) Boolean(ID=79)    Cluster    "Radio Buttons" "Ring" "Listbox" "Enum" "Type Definition"
	/CONTENT/CONTROL/@name
	
	if array, /CONTENT/CONTROL/CONTENT/CONTROL/@type  Numeric
-->
